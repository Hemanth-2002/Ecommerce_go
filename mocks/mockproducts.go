// Code generated by MockGen. DO NOT EDIT.
// Source: ecommerce/database (interfaces: DbProducts)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "ecommerce/db_model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDbProducts is a mock of DbProducts interface.
type MockDbProducts struct {
	ctrl     *gomock.Controller
	recorder *MockDbProductsMockRecorder
}

// MockDbProductsMockRecorder is the mock recorder for MockDbProducts.
type MockDbProductsMockRecorder struct {
	mock *MockDbProducts
}

// NewMockDbProducts creates a new mock instance.
func NewMockDbProducts(ctrl *gomock.Controller) *MockDbProducts {
	mock := &MockDbProducts{ctrl: ctrl}
	mock.recorder = &MockDbProductsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbProducts) EXPECT() *MockDbProductsMockRecorder {
	return m.recorder
}

// GetProds mocks base method.
func (m *MockDbProducts) GetProds() ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProds")
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProds indicates an expected call of GetProds.
func (mr *MockDbProductsMockRecorder) GetProds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProds", reflect.TypeOf((*MockDbProducts)(nil).GetProds))
}
